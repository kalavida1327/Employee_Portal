service: employee-portal
provider:
  name: aws
  runtime: nodejs18.x
  stage: sit
  region: ap-south-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}
custom:
  postsTableName: Employee_Table
plugins:
  - serverless-iam-roles-per-function
functions:
  updateEmployee:
    handler: api.updateEmployee
    name: Update-Emloyee
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: employees/{empId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn
  softDeleteEmployee:
    handler: Lib/DeleteModule/api.softDeleteEmployee
    name: Soft-Delete-Employee
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: PATCH /employees/{empId}   
          method: DELETE # Change the method to PATCH
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "dynamodb:UpdateItem" # Update the IAM action to UpdateItem
        Resource: !GetAtt PostsTable.Arn # The resource remains the same
  deleteEmployee:
    handler:  Lib/DeleteModule/api.deleteEmployee
    name: Delete-Employee
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: employees/{empId}
          method: DELETE 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "dynamodb:DeleteItem"
        Resource: !GetAtt PostsTable.Arn # The resource remains the same   
resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: empId
            AttributeType: S
        KeySchema:
          - AttributeName: empId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1